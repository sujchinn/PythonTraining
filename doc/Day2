>>> num
21
>>> num = 0xAF
>>> num
175
>>> num = 0o777
>>> num
511
>>> num = 0o7
>>> num
7
>>> num = 0o17
>>> num
15
>>> bin(num)
'0b1111'
>>> oct(num)
'017'
>>>

>>> print ord('a')
97
>>> print chr(65)
A

String to List
--------------
>>> name="Sujeeth Kumar"
>>> arr=list(name)              #string to list
>>> arr
['S', 'u', 'j', 'e', 'e', 't', 'h', ' ', 'K', 'u', 'm', 'a', 'r']
>>> type(arr)
<type 'list'>
>>> "".join(arr)                #list to string
'Sujeeth Kumar'
>>> name = str(arr)             #wrong syntax
>>> name
"['S', 'u', 'j', 'e', 'e', 't', 'h', ' ', 'K', 'u', 'm', 'a', 'r']"
>>>

padding:
-------
"=".join(arr)

S=u=j=e=e=t=h= =k=u=m=a=r=


string = "0b1111"
num = int(string,base=2)

, at end of print statement removes default\n and replaces with space char

Byte Array
----------
arr=bytearray()

- is mutable
- one byte for each elements
- can store only positive integer
- elements b/w 0 to 255

Deep Copy
---------

names=['arun','bob']
temp = names #shallow copy
temp1 = names[::] #deep copy since we are specifying part of the string which is whole string

else
import copy
names=['arun','bob']
temp = copy.deepcopy(names) #deep copy

arr[:] = map(int,arr)  #retains the id,overwrites the value instead of creating int memory in heap


Array multiplication:
--------------------
arr = [0]*10
print arr
[0,0,0,0,0,0,0,0,0,0]


names=['arun','ajith','anup','amar']
#convert to upper

Syntax:
-------
map(<<function_name that accepts one arg and returns a value>>,<<any iterable datatype>>)

map(upper,names)

>>> data = ["ha","jak","12345"]
>>> length = map(len,data)
>>> length
[2, 3, 5]
>>>


Lambda function:
---------------
syntax:
lambda x,y:x+y

set
----

- eliminates the duplicates
- unorderes data structure like dict
-       union
        diff
        intersection
        issubset
        issuperset

        set(a) & set(b) #intersection
        set(a)-set(b) - unique in a
Nested datastructures:
----------------

a=[10,20]
b=[30,40]
c=[50,60]

arr=[a,b,c]

len(arr)=2
arr[0] prints [10,20]
arr[0][0] prints 10


dict in dict is also possible

File Operations
---------------

Data persistence
BOF-beginning of File
EOF
File Cursor
Seek - randomly move the cursor
tell - from BOF how many bytes cursor has moved

types of file
--------------
          _______ Text mode  open modes - write(cursor at BOF)
          |                               read(cursor at BOF)
Files ----                                append(cursor at EOF)
          |_______Binary Mode


Opening a file
--------------
pyhton 2.7 ===> f1=file("c:\\data\\one.txt","w")
2.7 and 3.4 ===> f1 = open("c:\\data\\one.txt","w")

seek
-----
seek(number of bytes, from where) #0-BOF, 1 - CUR 2 - EOF

tell
----
tell() #no.of bytes from BOF to current CUR location

f1.seek(0,2)
n=f1.tell #gives the size of the file


Functions
---------
 reusable of code

 > function shld be defined before its called
 > func block is executed only when you call it
 > func can return more than one value - TUPLE

scope of variable
-----------------
 if a variable is defined within the func such vars are called LOCAL VARS

Functions can have
    - Positional arg
    - Default arg

Positional args
----------------
def add_data(code,name,dept):
  print "code=",code
  print "name=",name
  print "Dept=",dept

>arguments has to be same positional order
>exact number of args

Default args
-------------
def add_data(code=0,name=null,dept=null):
  print "code=",code
  print "name=",name
  print "Dept=",dept

  add_date(name='arun')

>default values has to be from right to left
>default arg cannot be in the middle

Rules:

Keyword arg must be followed by keyword only
Default values should be an immutable object


Libraries
---------


Symbol table
 in C, there is a centralized symbol table
 in python it is decentralized

Namespaces/Package - Symbol table in python,java

Two types of Lib
 - class lib
 - procedural libs

Procedural libs
----------------
myfunc.py
----------
__version__ = 1.0
__author__ = 'ssujchinn'
#__all__ = ['fun','foo','baaz','hai','person']

person='Hari'
def func():
    print "hello from",__name__

def foo():
    print "hai from foo"

def baaz():
    print "I'm in baaz"
def hai():
    print "Hello World!"


funccall
--------
import myfunc
myfunc.foo()

or

import myfunc as f
f.foo()

or

from mufunc import *

foo()

